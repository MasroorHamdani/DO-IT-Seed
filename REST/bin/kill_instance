#!/usr/bin/python



import sys
sys.path[0:0] = [
  '/home/anurag/DO-IT-Rest/lib/buildout/eggs/Fabric-1.8.0-py2.7.egg',
  '/home/anurag/DO-IT-Rest/lib/buildout/eggs/boto-2.24.0-py2.7.egg',
  '/home/anurag/DO-IT-Rest/src',
  '/usr/local/lib/python2.7/dist-packages',
  '/home/anurag/DO-IT-Rest/lib/buildout/eggs/paramiko-1.14.0-py2.7.egg',
  '/home/anurag/DO-IT-Rest/lib/buildout/eggs/ecdsa-0.11-py2.7.egg',
  '/home/anurag/DO-IT-Rest/lib/buildout/eggs/pycrypto-2.6.1-py2.7-linux-x86_64.egg',
  '/home/anurag/DO-IT-Rest/lib/buildout/eggs/six-1.7.2-py2.7.egg',
  ]


import sys
from optparse import OptionParser

import boto
from boto.ec2 import regions



def kill_instance(region, ids):
    """Kill an instances given it's instance IDs"""
    # Connect the region
    ec2 = boto.connect_ec2(region=region)
    for instance_id in ids:
        print "Stopping instance: %s" % instance_id
        ec2.terminate_instances([instance_id])


if __name__ == "__main__":
    parser = OptionParser(usage="kill_instance [-r] id [id ...]")
    parser.add_option("-r", "--region", help="Region (default us-east-1)", dest="region", default="us-east-1")
    (options, args) = parser.parse_args()
    if not args:
        parser.print_help()
        sys.exit(1)
    for r in regions():
        if r.name == options.region:
            region = r
            break
    else:
        print "Region %s not found." % options.region
        sys.exit(1)

    kill_instance(region, args)
